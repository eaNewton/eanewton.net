{"version":3,"sources":["SVGMarker.js"],"names":["SVGMarker","options","default_","clickable","cursor","draggable","icon","anchor","google","maps","Point","size","Size","url","text","content","font","color","weight","position","html","map","opacity","title","visible","zIndex","key","_typeof","key2","hasOwnProperty","this","setValues","setMap","prototype","OverlayView","onAdd","self","container","document","createElement","style","border","borderWidth","get","visibility","event","addDomListener","trigger","set","origin","moveHandler","getDiv","left","clientX","top","clientY","pos","getProjection","fromLatLngToDivPixel","latLng","fromDivPixelToLatLng","x","y","draw","removeListener","img","src","classList","add","width","height","display","setAttribute","appendChild","textContent","fontFamily","fontSize","fontWeight","transform","getPanes","overlayImage","coords","onRemove","parentNode","removeChild","setZIndex","zindex","setOpacity","opacity_value","setIcon","new_icon","current_icon","querySelector","hide","show","toggle","getPosition","toggleDOM","getMap"],"mappings":"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","file":"map.min.js","sourcesContent":["/*! SVGMarker v0.7.0 - https://github.com/defvayne23/SVGMarker */\nSVGMarker.prototype = new google.maps.OverlayView();\n\n/** @constructor */\nfunction SVGMarker(options) {\n  var default_ = {\n    clickable: true,\n    cursor: 'pointer',\n    draggable: false,\n    icon: {\n      anchor: new google.maps.Point(0, 0),\n      size: new google.maps.Size(30,30),\n      url: '',\n      text: {\n        content: '',\n        font: 'Helvetica, sans-serif',\n        color: '#000',\n        size: '10px',\n        weight: '400',\n        position: [0,0]\n      },\n      html: ''\n    },\n    map: '',\n    opacity: 1,\n    position: '',\n    title: '',\n    visible: true,\n    zIndex: '',\n  }\n\n  // Merge options with default\n  for(var key in options) {\n    if(typeof default_[key] === 'object') {\n      for(var key2 in options[key]) {\n        if(options[key].hasOwnProperty(key2)) {\n          default_[key][key2] = options[key][key2];\n        }\n      }\n    } else {\n      if(options.hasOwnProperty(key)) {\n        default_[key] = options[key];\n      }\n    }\n  }\n  this.setValues(default_);\n\n  // Explicitly call setMap on this overlay\n  if('map' in options) {\n    this.setMap(options.map);\n  }\n}\n\n/**\n * onAdd is called when the map's panes are ready and the overlay has been\n * added to the map.\n */\nSVGMarker.prototype.onAdd = function() {\n  var self = this;\n\n  // Create container with no visible styles\n  var container = document.createElement('div');\n  container.style.border = 'none';\n  container.style.borderWidth = '0px';\n  container.style.position = 'absolute';\n\n  // Set zIndex\n  if(this.get('zIndex') !== '') {\n    container.style.zIndex = this.get('zIndex');\n  }\n\n  // Set if marker is visible when added\n  if(this.get('visible') === false) {\n    container.style.visibility = 'hidden';\n  }\n\n  // Set marker opacity\n  if(this.get('opacity') >= 0 && this.get('opacity') <= 1) {\n    container.style.opacity = this.get('opacity');\n  }\n\n  // Add click event to container\n  if(this.get('clickable') === true) {\n    google.maps.event.addDomListener(container, 'click', function(event) {\n      google.maps.event.trigger(self, 'click', event);\n    });\n  }\n\n  // Add drag start and end to container\n  if(this.get('draggable') === true) {\n    google.maps.event.addDomListener(container, 'drag', function(event) {\n      google.maps.event.trigger(self, 'drag', event);\n    });\n\n    google.maps.event.addDomListener(container, 'mousedown', function(event){\n      google.maps.event.trigger(self, 'dragstart', event);\n\n      this.style.cursor='move';\n      self.get('map').set('draggable',false);\n\n      var origin = event;\n\n      self.moveHandler  = google.maps.event.addDomListener(self.get('map').getDiv(), 'mousemove', function(event){\n        google.maps.event.trigger(self, 'drag', event);\n\n        var left   = origin.clientX-event.clientX,\n            top    = origin.clientY-event.clientY,\n            pos    = self.getProjection().fromLatLngToDivPixel(self.get('position')),\n            latLng = self.getProjection().fromDivPixelToLatLng(new google.maps.Point(pos.x-left,pos.y-top));\n\n        origin = event;\n        self.set('position', latLng);\n        self.draw();\n      });\n    });\n\n    google.maps.event.addDomListener(container, 'mouseup', function(event){\n      google.maps.event.trigger(self, 'dragend', event);\n      self.get('map').set('draggable',true);\n      this.style.cursor='default';\n      google.maps.event.removeListener(self.moveHandler);\n    });\n\n    google.maps.event.addDomListener(this.get('map').getDiv(), 'mouseleave', function(event){\n      google.maps.event.trigger(container, 'mouseup', event);\n    });\n  }\n\n  google.maps.event.addDomListener(container, 'mouseover', function(event){\n    google.maps.event.trigger(self, 'mouseover', event);\n  });\n\n  google.maps.event.addDomListener(container, 'mouseout', function(event){\n    google.maps.event.trigger(self, 'mouseout', event);\n  });\n\n  // Create the img element\n  var img = document.createElement('img');\n  img.src = this.get('icon').url;\n  img.classList.add('SVGMarker');\n  img.style.width = this.get('icon').size.width+'px';\n  img.style.height = this.get('icon').size.height+'px';\n  img.style.display = 'block';\n  img.setAttribute('alt', this.get('title'));\n\n  // Attach image to div\n  container.appendChild(img);\n\n  if(this.get('icon').text.content !== '') {\n    var text = document.createElement('span');\n    text.textContent = this.get('icon').text.content;\n    text.style.fontFamily = this.get('icon').text.font;\n    text.style.fontSize = this.get('icon').text.size;\n    text.style.fontWeight = this.get('icon').text.weight;\n    text.style.color = this.get('icon').text.color;\n    text.style.position = 'absolute';\n    text.style.top = this.get('icon').text.position[0] + 'px';\n    text.style.left = this.get('icon').text.position[1] + 'px';\n    text.style.transform = 'translate(-50%, -50%)';\n    this.get('container').appendChild(text);\n  }\n\n  if(this.get('icon').html !== '') {\n    container.appendChild( this.get('icon').html );\n  }\n\n  // Add the element to the \"overlayImage\" pane.\n  this.set('container', container);\n  this.getPanes().overlayImage.appendChild(container);\n};\n\nSVGMarker.prototype.draw = function() {\n  var overlayProjection = this.getProjection();\n  var coords = overlayProjection.fromLatLngToDivPixel(this.get('position'));\n\n  this.get('container').style.left = (coords.x - this.get('icon').anchor.x) + 'px';\n  this.get('container').style.top = (coords.y - this.get('icon').anchor.y) + 'px';\n\n  this.get('container').style.cursor = this.get('cursor');\n};\n\nSVGMarker.prototype.onRemove = function() {\n  this.get('container').parentNode.removeChild(this.get('container'));\n  this.set('container', null);\n};\n\nSVGMarker.prototype.setZIndex = function(zindex) {\n  if (this.get('container')) {\n    this.get('container').style.zIndex = zindex;\n  }\n};\n\nSVGMarker.prototype.setOpacity = function(opacity_value) {\n  if (this.get('container')) {\n    this.get('container').style.opacity = opacity_value;\n  }\n};\n\nSVGMarker.prototype.setIcon = function(new_icon) {\n  var current_icon = this.get('icon');\n\n  // Make sure this isn't being called during init\n  if(current_icon) {\n    // Marge icon with default\n    for(var key in new_icon) {\n      if(typeof current_icon[key] === 'object') {\n        for(var key2 in new_icon[key]) {\n          if(new_icon[key].hasOwnProperty(key2)) {\n            current_icon[key][key2] = new_icon[key][key2];\n          }\n        }\n      } else {\n        if(new_icon.hasOwnProperty(key)) {\n          current_icon[key] = new_icon[key];\n        }\n      }\n    }\n    this.set('icon', current_icon);\n\n    // Update image\n    var img = this.get('container').querySelector('img.SVGMarker');\n    img.src = current_icon.url;\n    img.style.width = current_icon.size.width+'px';\n    img.style.height = current_icon.size.height+'px';\n\n    // Update anchor\n    var overlayProjection = this.getProjection();\n    var coords = overlayProjection.fromLatLngToDivPixel(this.get('position'));\n\n    this.get('container').style.left = (coords.x - current_icon.anchor.x) + 'px';\n    this.get('container').style.top = (coords.y - current_icon.anchor.y) + 'px';\n  } else {\n    this.set('icon', new_icon);\n  }\n};\n\nSVGMarker.prototype.hide = function() {\n  if (this.get('container')) {\n    this.get('container').style.visibility = 'hidden';\n  }\n};\n\nSVGMarker.prototype.show = function() {\n  if (this.get('container')) {\n    this.get('container').style.visibility = 'visible';\n  }\n};\n\nSVGMarker.prototype.toggle = function() {\n  if (this.get('container')) {\n    if (this.get('container').style.visibility === 'hidden') {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n};\n\nSVGMarker.prototype.getPosition = function() {\n  return this.get('position');\n};\n\n// Detach from map\nSVGMarker.prototype.toggleDOM = function() {\n  if (this.getMap()) {\n    // Note: Calls onRemove()\n    this.setMap(null);\n  } else {\n    // Note: Calls onAdd()\n    this.setMap(this.get('map'));\n  }\n};\n"]}